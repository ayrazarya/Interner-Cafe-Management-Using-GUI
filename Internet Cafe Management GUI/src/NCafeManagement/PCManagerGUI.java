/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package NCafeManagement;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.sql.Time;


/**
 *
 * @author Arya Prathama
 */
public class PCManagerGUI extends javax.swing.JFrame {
      String Username;
        String Password;
        String loggedInUsername;
        private Connection Con;
  
    /**
     * Creates new form AdminManagerGUI
     */
    public PCManagerGUI() {
        initComponents();
        setTitle("PC Manager");
        this.setLocationRelativeTo(null);
    }
     public PCManagerGUI(String username,String  password, Connection connection) {
         initComponents();
         setTitle("PC Manager");
         this.setLocationRelativeTo(null);

         Username = username;
         Password = password;
         loggedInUsername = username;
         this.Con = connection;
     }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        ViewPCButton = new javax.swing.JButton();
        ActivatePCButton = new javax.swing.JButton();
        AddNewPCButton = new javax.swing.JButton();
        PaymentButton = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 153, 0));

        ViewPCButton.setText("View PC");
        ViewPCButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ViewPCButtonMouseClicked(evt);
            }
        });

        ActivatePCButton.setText("Activate a PC");
        ActivatePCButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ActivatePCButtonMouseClicked(evt);
            }
        });

        AddNewPCButton.setText("Add a new PC");
        AddNewPCButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddNewPCButtonMouseClicked(evt);
            }
        });

        PaymentButton.setText("Payment");
        PaymentButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PaymentButtonMouseClicked(evt);
            }
        });

        Back.setText("Back");
        Back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(ViewPCButton, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(ActivatePCButton)
                .addGap(53, 53, 53)
                .addComponent(AddNewPCButton, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(PaymentButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ViewPCButton)
                    .addComponent(ActivatePCButton)
                    .addComponent(AddNewPCButton)
                    .addComponent(PaymentButton)
                    .addComponent(Back))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Status"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    PreparedStatement pst = null;
    ResultSet Rs = null;
    Statement St = null;
    
    
    private void BackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackMouseClicked
        AfterLoginGui afterLoginGui = new AfterLoginGui(loggedInUsername, Password, Con);
        afterLoginGui.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackMouseClicked


    private void ViewPCButtonMouseClicked(java.awt.event.MouseEvent evt) {

        try {
            Statement statement = Con.createStatement();
            ResultSet FirstSet = statement.executeQuery("SELECT * FROM tb_pc");
            updatePCTime(FirstSet);
            ResultSet UpdatedSet = statement.executeQuery("SELECT * FROM tb_pc");
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            while (UpdatedSet.next()) {
                String pc = UpdatedSet.getString("kode_pc");
                String status = UpdatedSet.getString("status");
                model.addRow(new Object[]{pc, status});
            }
            UpdatedSet.close();
            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to connect to database.");
        }

    }




 


    private void ActivatePCButtonMouseClicked(java.awt.event.MouseEvent evt) {
        String idInput = JOptionPane.showInputDialog(this, "Enter the PC's ID: ");
        String regex = "^[0-9]{2}:[0-9]{2}:[0-9]{2}$";
        if (idInput != null && !idInput.isEmpty()) {
            try {
                String ID = idInput.trim();
                PreparedStatement preparedStatement = Con.prepareStatement("SELECT status FROM tb_pc WHERE kode_pc = ?");
                preparedStatement.setString(1, ID);
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    String currentStatus = resultSet.getString("status");

                    if ("Available".equalsIgnoreCase(currentStatus)) {
                 
                        String durationInput = JOptionPane.showInputDialog(this, "Enter the customer's duration (in HH:mm:ss format): ");
                        
                      
                        if (durationInput != null && !durationInput.isEmpty()) {
                                if (durationInput.matches(regex)) {
                                    Time duration = Time.valueOf(durationInput);
                                    PreparedStatement updateStatement = Con.prepareStatement("UPDATE tb_pc SET pc_start = ?, duration = ?, status = 'Occupied' WHERE kode_pc = ?");
                                    updateStatement.setTimestamp(1, new Timestamp(System.currentTimeMillis()));
                                    updateStatement.setTime(2, duration);
                                    updateStatement.setString(3, ID);
                                    int rowsAffected = updateStatement.executeUpdate();

                                    if (rowsAffected > 0) {
                                        JOptionPane.showMessageDialog(this, "PC activated successfully!");
                                    } else {
                                        JOptionPane.showMessageDialog(this, "Failed to activate PC.", "Error", JOptionPane.ERROR_MESSAGE);
                                    }
                                }
                                else {
                                    JOptionPane.showMessageDialog(this, "Invalid duration format! Please enter the duration in HH:mm:ss format.", "Error", JOptionPane.ERROR_MESSAGE);

                                }

                        } else {
                            JOptionPane.showMessageDialog(this, "No duration input provided!", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "PC is not available for activation.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "PC ID not found!", "Error", JOptionPane.ERROR_MESSAGE);
                }

               
                resultSet.close();
                preparedStatement.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Failed to connect to database.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No ID input provided!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String getAdminType(String username) {
        String adminType = "";

        try {
            Statement statement = Con.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT Status FROM tb_username WHERE Username = '" + username + "'");

            if (resultSet.next()) {
                adminType = resultSet.getString("Status");
            }
            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return adminType;

    }




    private void AddNewPCButtonMouseClicked(java.awt.event.MouseEvent evt) {
       String assignId = JOptionPane.showInputDialog(this, "Assign ID to the new PC: ");
        try {
    if (assignId != null && !assignId.isEmpty()) {
        String ID = assignId.trim();
        
        if (ID.matches("\\d+")) { 
            if (isUniqueId(ID)) {
                
                PreparedStatement preparedStatement = Con.prepareStatement("INSERT INTO tb_pc (kode_pc, status, duration) VALUES (?,?,?)");

                // Assign ID PC baru
                preparedStatement.setString(1, ID);
                preparedStatement.setString(2, "Available");
                Time duration = Time.valueOf("00:00:00");
                preparedStatement.setTime(3, duration);

              
                int rowsAffected = preparedStatement.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "New PC added successfully!");
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to add new PC.", "Error", JOptionPane.ERROR_MESSAGE);
                }

            
                preparedStatement.close();
            } else {
                JOptionPane.showMessageDialog(this, "Inputted ID is not unique!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Input ID should only contain numbers!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "No ID input provided!", "Error", JOptionPane.ERROR_MESSAGE);
    }
} catch (SQLException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Failed to connect to database.", "Error", JOptionPane.ERROR_MESSAGE);
}
    }







    private void PaymentButtonMouseClicked(java.awt.event.MouseEvent evt) {
   PaymentGUI paymentGUI = new PaymentGUI(Username, Password, Con);
   paymentGUI.setVisible(true);
   this.dispose();
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PCManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PCManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PCManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PCManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PCManagerGUI().setVisible(true);
            }
        });
    }
    
    private boolean isUniqueId (String id) {
        boolean unique = false;
        try{
        Statement state = Con.createStatement();
        ResultSet rs = state.executeQuery("SELECT kode_pc FROM tb_pc");
        while (rs.next()) {
            if(id.equals(rs.getString("kode_pc"))) {
                return unique;
            }
        }
        unique = true;
        } catch (Exception E) {
            JOptionPane.showMessageDialog(this, "Failed to fetch IDs from database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    return unique;
    }
    
    private void updatePCTime (ResultSet resultSet) {
        try {
            PreparedStatement updateAvailability = Con.prepareStatement("UPDATE tb_pc SET status = 'Available', duration = ? WHERE kode_pc = ?");
            while (resultSet.next()) {
                String duration = resultSet.getString("duration");
                long durationTime = durationToMilli(duration);
                long start = resultSet.getTimestamp("pc_start").getTime();
                long now = System.currentTimeMillis();
                if((now-start)>durationTime && resultSet.getString("status").equals("Occupied")) {
                    updateAvailability.setTime(1, Time.valueOf("00:00:00"));
                    updateAvailability.setString(2, resultSet.getString("kode_pc"));
                    int rowsUpdated = updateAvailability.executeUpdate(); //execute statement
                    if (rowsUpdated > 0) {
                        JOptionPane.showMessageDialog(this, "PC "+resultSet.getString("kode_pc")+" has become available!");
                    }
                
                }
                /*else if (durationTime > (now-start) && resultSet.getString("status").equals("Occupied")) {
                    Time updatedDuration = new Time(durationTime - (now-start));
                    updateAvailability.setTime(1, updatedDuration);
                    updateAvailability.setString(2, resultSet.getString("kode_pc"));
                    updateAvailability.executeUpdate();
                }*/
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error updating database", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private long durationToMilli(String duration) {
        String [] splitDuration = duration.split(":");
        int hours = Integer.parseInt(splitDuration[0]);
        int minutes = Integer.parseInt(splitDuration[1]);
        int seconds = Integer.parseInt(splitDuration[2]);
        long durationTime = (hours * 3600 + minutes * 60 + seconds) * 1000;
        return durationTime;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ActivatePCButton;
    private javax.swing.JButton AddNewPCButton;
    private javax.swing.JButton Back;
    private javax.swing.JButton PaymentButton;
    private javax.swing.JButton ViewPCButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
